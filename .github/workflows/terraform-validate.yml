name: "Terraform Code Quality"

on:
  pull_request:
  push:

jobs:

  # phase 1
  discover_stages:
    name: Discover
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # here we create the json, we need the "id:" so we can use it in "outputs" below
      - id: set-matrix

        # find main.tf files in stages folder, trim to path, store as array, remove any empty.
        run: echo "::set-output name=matrix::$(find stages -name main.tf | sed 's:[^/]*$::' | jq -R -s -c 'split("\n")' | jq -c 'map(select(length > 0))' )"

    # here, we save the result of this 1st phase to the "outputs"
    outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}

# phase 2, use it in a matrix
  terraform_validate:
    name: "Validate"
    runs-on: ubuntu-latest
    # this means, wait for the "discover_stages" phase 1 to finish
    needs: discover_stages
    strategy:
        # â†“ create dynamic matrix from the json
        matrix:
          validate: ${{ fromJson(needs.discover_stages.outputs.matrix) }}
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup
        uses: hashicorp/setup-terraform@v1

      # Checks that all Terraform configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state.
      - name: Validate
        env:
          FOLDER: ${{ matrix.validate }}
        run: |
          cd $FOLDER

          terraform init -backend=false
          terraform validate

          if [ ! -f ".terragrunt.lock.hck" ]; then
            echo "Terraform lockfile doesn't exist"
            exit 1
          fi

  terraform_format:
    name: "Format"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Run tfsec with reviewdog
        uses: reviewdog/action-tfsec@v1.11.0
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.github_token }}
          tfsec_version: "v0.63.1"
          fail_on_error: "true"
          filter_mode: "nofilter"
          tfsec_flags: "-e general-secrets-sensitive-in-variable,general-secrets-sensitive-in-local,general-secrets-sensitive-in-attribute"

      - name: Run tflint with reviewdog
        uses: reviewdog/action-tflint@v1.13.0
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.github_token }}
          fail_on_error: "true"
          filter_mode: "nofilter"
