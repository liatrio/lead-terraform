name: "Terraform Validate"

on:
  pull_request:
  push:

jobs:

  # phase 1
  provide_stages_json:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          stages:
          - stages/apps
          - stages/cloud-provider
          - stages/config
          - stages/vault
      steps:
          # here we create the json, we need the "id:" so we can use it in "outputs" below
          -
              id: set-matrix
              env:
                STAGE: ${{ matrix.stages }}
              run: find $STAGE -name main.tf| sed 's:[^/]*$::'| jq -R -s -c 'split("\n")'| jq 'map(select(length > 0))'
      # here, we save the result of this 1st phase to the "outputs"
      outputs:
          matrix: ${{ steps.set-matrix.outputs.matrix }}
  
  # phase 2, use it in a matrix
  terraform_format:
    name: "Terraform Format and Validation"
    runs-on: ubuntu-latest
    # this means, wait for the "provide_stages_json" phase 1 to finish
    needs: provide_stages_json
    strategy:
        # â†“ create dynamic matrix from the json
        matrix:
            validate: ${{ fromJson(needs.provide_stages_json.outputs.matrix) }}
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check -recursive

      # Checks that all Terraform configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state. 
      - name: Terraform Validate
        env:
          FOLDER: ${{ matrix.validate }}
        run: cd $FOLDER && terraform init -backend=false && terraform validate

      - name: Run tfsec with reviewdog
        uses: reviewdog/action-tfsec@v1.11.0
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.github_token }}
          fail_on_error: "true"
          filter_mode: "nofilter"
          tfsec_flags: "-e general-secrets-sensitive-in-variable,general-secrets-sensitive-in-local,general-secrets-sensitive-in-attribute"

      - name: Run tflint with reviewdog
        uses: reviewdog/action-tflint@v1.13.0
        if: ${{ always() }}
        with:
          github_token: ${{ secrets.github_token }}
          fail_on_error: "true"
          filter_mode: "nofilter"
