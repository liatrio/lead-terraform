name: "Terraform Code Quality"

on:
  pull_request:
  push:

jobs:

  discover_stages:
    name: Discover
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # here we create the json, we need the "id:" so we can use it in "outputs" below
      - id: set-matrix

        # find main.tf files in stages folder, trim to path, store as array, remove any empty.
        run: echo "::set-output name=matrix::$(find stages -name main.tf | sed 's:[^/]*$::' | jq -R -s -c 'split("\n") | map(select(length > 0))')"

    outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}

  terraform_validate:
    name: "Validate"
    runs-on: ubuntu-latest

    needs: discover_stages
    strategy:
        # ↓ create dynamic matrix from the json
        matrix:
          validate: ${{ fromJson(needs.discover_stages.outputs.matrix) }}
        fail-fast: false
    defaults:
      run:
        shell: bash

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup
        uses: hashicorp/setup-terraform@v1

      # Checks that all Terraform configuration is syntactically valid and internally consistent, regardless of any provided variables or existing state.
      - name: Validate
        env:
          FOLDER: ${{ matrix.validate }}
        run: |
          cd $FOLDER

          if [ ! -f ".terraform.lock.hcl" ]; then
            echo "Terraform lockfile doesn't exist in this root module. Please create one using \"terraform init -backend=false\""
            exit 1
          fi

          terraform init -backend=false
          terraform validate

  terraform_format:
    name: "Format"
    runs-on: ubuntu-latest
    strategy:
        # ↓ create dynamic matrix from the json
        matrix:
          validate: ${{ fromJson(needs.discover_stages.outputs.matrix) }}
        fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # TODO: need to setup go?

      - name: Install tfsec
        run: go install github.com/aquasecurity/tfsec/cmd/tfsec@v1.26.3

      - name: Run tfsec on each folder
        env:
          FOLDER: ${{ matrix.validate }}
        run: |
          cd $FOLDER

          tfsec \
          -e general-secrets-sensitive-in-variable,general-secrets-sensitive-in-local,general-secrets-sensitive-in-attribute \
          --format sarif \
          --out tfsec.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif
        with:
          sarif-file: ./tfsec.sarif

      # TODO: incorporate tflint

      # - name: Run tflint with reviewdog
      #   uses: reviewdog/action-tflint@v1.13.0
      #   if: ${{ always() }}
      #   with:
      #     github_token: ${{ secrets.github_token }}
      #     fail_on_error: "true"
      #     filter_mode: "nofilter"
